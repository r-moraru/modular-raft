// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entries "github.com/r-moraru/modular-raft/proto/entries"
	mock "github.com/stretchr/testify/mock"

	state_machine "github.com/r-moraru/modular-raft/state_machine"
)

// StateMachine is an autogenerated mock type for the StateMachine type
type StateMachine struct {
	mock.Mock
}

type StateMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *StateMachine) EXPECT() *StateMachine_Expecter {
	return &StateMachine_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: _a0
func (_m *StateMachine) Apply(_a0 *entries.LogEntry) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entries.LogEntry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateMachine_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type StateMachine_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - _a0 *entries.LogEntry
func (_e *StateMachine_Expecter) Apply(_a0 interface{}) *StateMachine_Apply_Call {
	return &StateMachine_Apply_Call{Call: _e.mock.On("Apply", _a0)}
}

func (_c *StateMachine_Apply_Call) Run(run func(_a0 *entries.LogEntry)) *StateMachine_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entries.LogEntry))
	})
	return _c
}

func (_c *StateMachine_Apply_Call) Return(_a0 error) *StateMachine_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateMachine_Apply_Call) RunAndReturn(run func(*entries.LogEntry) error) *StateMachine_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastApplied provides a mock function with given fields:
func (_m *StateMachine) GetLastApplied() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastApplied")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StateMachine_GetLastApplied_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastApplied'
type StateMachine_GetLastApplied_Call struct {
	*mock.Call
}

// GetLastApplied is a helper method to define mock.On call
func (_e *StateMachine_Expecter) GetLastApplied() *StateMachine_GetLastApplied_Call {
	return &StateMachine_GetLastApplied_Call{Call: _e.mock.On("GetLastApplied")}
}

func (_c *StateMachine_GetLastApplied_Call) Run(run func()) *StateMachine_GetLastApplied_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateMachine_GetLastApplied_Call) Return(_a0 uint64) *StateMachine_GetLastApplied_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateMachine_GetLastApplied_Call) RunAndReturn(run func() uint64) *StateMachine_GetLastApplied_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForResult provides a mock function with given fields: ctx, clientID, serializationID
func (_m *StateMachine) WaitForResult(ctx context.Context, clientID string, serializationID uint64) chan state_machine.ApplyResult {
	ret := _m.Called(ctx, clientID, serializationID)

	if len(ret) == 0 {
		panic("no return value specified for WaitForResult")
	}

	var r0 chan state_machine.ApplyResult
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) chan state_machine.ApplyResult); ok {
		r0 = rf(ctx, clientID, serializationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan state_machine.ApplyResult)
		}
	}

	return r0
}

// StateMachine_WaitForResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForResult'
type StateMachine_WaitForResult_Call struct {
	*mock.Call
}

// WaitForResult is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
//   - serializationID uint64
func (_e *StateMachine_Expecter) WaitForResult(ctx interface{}, clientID interface{}, serializationID interface{}) *StateMachine_WaitForResult_Call {
	return &StateMachine_WaitForResult_Call{Call: _e.mock.On("WaitForResult", ctx, clientID, serializationID)}
}

func (_c *StateMachine_WaitForResult_Call) Run(run func(ctx context.Context, clientID string, serializationID uint64)) *StateMachine_WaitForResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *StateMachine_WaitForResult_Call) Return(_a0 chan state_machine.ApplyResult) *StateMachine_WaitForResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateMachine_WaitForResult_Call) RunAndReturn(run func(context.Context, string, uint64) chan state_machine.ApplyResult) *StateMachine_WaitForResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateMachine creates a new instance of StateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateMachine {
	mock := &StateMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
