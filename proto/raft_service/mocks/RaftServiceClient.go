// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	raft_service "github.com/r-moraru/modular-raft/proto/raft_service"
)

// RaftServiceClient is an autogenerated mock type for the RaftServiceClient type
type RaftServiceClient struct {
	mock.Mock
}

type RaftServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RaftServiceClient) EXPECT() *RaftServiceClient_Expecter {
	return &RaftServiceClient_Expecter{mock: &_m.Mock}
}

// AppendEntries provides a mock function with given fields: ctx, in, opts
func (_m *RaftServiceClient) AppendEntries(ctx context.Context, in *raft_service.AppendEntriesRequest, opts ...grpc.CallOption) (*raft_service.AppendEntriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AppendEntries")
	}

	var r0 *raft_service.AppendEntriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *raft_service.AppendEntriesRequest, ...grpc.CallOption) (*raft_service.AppendEntriesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *raft_service.AppendEntriesRequest, ...grpc.CallOption) *raft_service.AppendEntriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raft_service.AppendEntriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *raft_service.AppendEntriesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaftServiceClient_AppendEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendEntries'
type RaftServiceClient_AppendEntries_Call struct {
	*mock.Call
}

// AppendEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - in *raft_service.AppendEntriesRequest
//   - opts ...grpc.CallOption
func (_e *RaftServiceClient_Expecter) AppendEntries(ctx interface{}, in interface{}, opts ...interface{}) *RaftServiceClient_AppendEntries_Call {
	return &RaftServiceClient_AppendEntries_Call{Call: _e.mock.On("AppendEntries",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RaftServiceClient_AppendEntries_Call) Run(run func(ctx context.Context, in *raft_service.AppendEntriesRequest, opts ...grpc.CallOption)) *RaftServiceClient_AppendEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*raft_service.AppendEntriesRequest), variadicArgs...)
	})
	return _c
}

func (_c *RaftServiceClient_AppendEntries_Call) Return(_a0 *raft_service.AppendEntriesResponse, _a1 error) *RaftServiceClient_AppendEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RaftServiceClient_AppendEntries_Call) RunAndReturn(run func(context.Context, *raft_service.AppendEntriesRequest, ...grpc.CallOption) (*raft_service.AppendEntriesResponse, error)) *RaftServiceClient_AppendEntries_Call {
	_c.Call.Return(run)
	return _c
}

// RequestVote provides a mock function with given fields: ctx, in, opts
func (_m *RaftServiceClient) RequestVote(ctx context.Context, in *raft_service.RequestVoteRequest, opts ...grpc.CallOption) (*raft_service.RequestVoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestVote")
	}

	var r0 *raft_service.RequestVoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *raft_service.RequestVoteRequest, ...grpc.CallOption) (*raft_service.RequestVoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *raft_service.RequestVoteRequest, ...grpc.CallOption) *raft_service.RequestVoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*raft_service.RequestVoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *raft_service.RequestVoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaftServiceClient_RequestVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestVote'
type RaftServiceClient_RequestVote_Call struct {
	*mock.Call
}

// RequestVote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *raft_service.RequestVoteRequest
//   - opts ...grpc.CallOption
func (_e *RaftServiceClient_Expecter) RequestVote(ctx interface{}, in interface{}, opts ...interface{}) *RaftServiceClient_RequestVote_Call {
	return &RaftServiceClient_RequestVote_Call{Call: _e.mock.On("RequestVote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RaftServiceClient_RequestVote_Call) Run(run func(ctx context.Context, in *raft_service.RequestVoteRequest, opts ...grpc.CallOption)) *RaftServiceClient_RequestVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*raft_service.RequestVoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *RaftServiceClient_RequestVote_Call) Return(_a0 *raft_service.RequestVoteResponse, _a1 error) *RaftServiceClient_RequestVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RaftServiceClient_RequestVote_Call) RunAndReturn(run func(context.Context, *raft_service.RequestVoteRequest, ...grpc.CallOption) (*raft_service.RequestVoteResponse, error)) *RaftServiceClient_RequestVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewRaftServiceClient creates a new instance of RaftServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRaftServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RaftServiceClient {
	mock := &RaftServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
