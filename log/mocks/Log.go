// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entries "github.com/r-moraru/modular-raft/proto/entries"

	mock "github.com/stretchr/testify/mock"
)

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

type Log_Expecter struct {
	mock *mock.Mock
}

func (_m *Log) EXPECT() *Log_Expecter {
	return &Log_Expecter{mock: &_m.Mock}
}

// AppendEntry provides a mock function with given fields: term, clientID, serializationID, entry
func (_m *Log) AppendEntry(term uint64, clientID string, serializationID uint64, entry string) error {
	ret := _m.Called(term, clientID, serializationID, entry)

	if len(ret) == 0 {
		panic("no return value specified for AppendEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string, uint64, string) error); ok {
		r0 = rf(term, clientID, serializationID, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log_AppendEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendEntry'
type Log_AppendEntry_Call struct {
	*mock.Call
}

// AppendEntry is a helper method to define mock.On call
//   - term uint64
//   - clientID string
//   - serializationID uint64
//   - entry string
func (_e *Log_Expecter) AppendEntry(term interface{}, clientID interface{}, serializationID interface{}, entry interface{}) *Log_AppendEntry_Call {
	return &Log_AppendEntry_Call{Call: _e.mock.On("AppendEntry", term, clientID, serializationID, entry)}
}

func (_c *Log_AppendEntry_Call) Run(run func(term uint64, clientID string, serializationID uint64, entry string)) *Log_AppendEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string), args[2].(uint64), args[3].(string))
	})
	return _c
}

func (_c *Log_AppendEntry_Call) Return(_a0 error) *Log_AppendEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_AppendEntry_Call) RunAndReturn(run func(uint64, string, uint64, string) error) *Log_AppendEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function with given fields: index
func (_m *Log) GetEntry(index uint64) (*entries.LogEntry, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 *entries.LogEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entries.LogEntry, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entries.LogEntry); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entries.LogEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type Log_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//   - index uint64
func (_e *Log_Expecter) GetEntry(index interface{}) *Log_GetEntry_Call {
	return &Log_GetEntry_Call{Call: _e.mock.On("GetEntry", index)}
}

func (_c *Log_GetEntry_Call) Run(run func(index uint64)) *Log_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Log_GetEntry_Call) Return(_a0 *entries.LogEntry, _a1 error) *Log_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Log_GetEntry_Call) RunAndReturn(run func(uint64) (*entries.LogEntry, error)) *Log_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastIndex provides a mock function with given fields:
func (_m *Log) GetLastIndex() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastIndex")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Log_GetLastIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastIndex'
type Log_GetLastIndex_Call struct {
	*mock.Call
}

// GetLastIndex is a helper method to define mock.On call
func (_e *Log_Expecter) GetLastIndex() *Log_GetLastIndex_Call {
	return &Log_GetLastIndex_Call{Call: _e.mock.On("GetLastIndex")}
}

func (_c *Log_GetLastIndex_Call) Run(run func()) *Log_GetLastIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_GetLastIndex_Call) Return(_a0 uint64) *Log_GetLastIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_GetLastIndex_Call) RunAndReturn(run func() uint64) *Log_GetLastIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetLength provides a mock function with given fields:
func (_m *Log) GetLength() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLength")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Log_GetLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLength'
type Log_GetLength_Call struct {
	*mock.Call
}

// GetLength is a helper method to define mock.On call
func (_e *Log_Expecter) GetLength() *Log_GetLength_Call {
	return &Log_GetLength_Call{Call: _e.mock.On("GetLength")}
}

func (_c *Log_GetLength_Call) Run(run func()) *Log_GetLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Log_GetLength_Call) Return(_a0 uint64) *Log_GetLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_GetLength_Call) RunAndReturn(run func() uint64) *Log_GetLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetTermAtIndex provides a mock function with given fields: index
func (_m *Log) GetTermAtIndex(index uint64) (uint64, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetTermAtIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log_GetTermAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTermAtIndex'
type Log_GetTermAtIndex_Call struct {
	*mock.Call
}

// GetTermAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *Log_Expecter) GetTermAtIndex(index interface{}) *Log_GetTermAtIndex_Call {
	return &Log_GetTermAtIndex_Call{Call: _e.mock.On("GetTermAtIndex", index)}
}

func (_c *Log_GetTermAtIndex_Call) Run(run func(index uint64)) *Log_GetTermAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Log_GetTermAtIndex_Call) Return(_a0 uint64, _a1 error) *Log_GetTermAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Log_GetTermAtIndex_Call) RunAndReturn(run func(uint64) (uint64, error)) *Log_GetTermAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLogEntry provides a mock function with given fields: _a0
func (_m *Log) InsertLogEntry(_a0 *entries.LogEntry) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InsertLogEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entries.LogEntry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log_InsertLogEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLogEntry'
type Log_InsertLogEntry_Call struct {
	*mock.Call
}

// InsertLogEntry is a helper method to define mock.On call
//   - _a0 *entries.LogEntry
func (_e *Log_Expecter) InsertLogEntry(_a0 interface{}) *Log_InsertLogEntry_Call {
	return &Log_InsertLogEntry_Call{Call: _e.mock.On("InsertLogEntry", _a0)}
}

func (_c *Log_InsertLogEntry_Call) Run(run func(_a0 *entries.LogEntry)) *Log_InsertLogEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entries.LogEntry))
	})
	return _c
}

func (_c *Log_InsertLogEntry_Call) Return(_a0 error) *Log_InsertLogEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Log_InsertLogEntry_Call) RunAndReturn(run func(*entries.LogEntry) error) *Log_InsertLogEntry_Call {
	_c.Call.Return(run)
	return _c
}

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
