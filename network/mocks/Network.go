// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entries "github.com/r-moraru/modular-raft/proto/entries"
	mock "github.com/stretchr/testify/mock"

	network "github.com/r-moraru/modular-raft/network"
)

// Network is an autogenerated mock type for the Network type
type Network struct {
	mock.Mock
}

type Network_Expecter struct {
	mock *mock.Mock
}

func (_m *Network) EXPECT() *Network_Expecter {
	return &Network_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields:
func (_m *Network) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Network_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type Network_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *Network_Expecter) GetId() *Network_GetId_Call {
	return &Network_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *Network_GetId_Call) Run(run func()) *Network_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_GetId_Call) Return(_a0 string) *Network_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_GetId_Call) RunAndReturn(run func() string) *Network_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeerList provides a mock function with given fields:
func (_m *Network) GetPeerList() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeerList")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Network_GetPeerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeerList'
type Network_GetPeerList_Call struct {
	*mock.Call
}

// GetPeerList is a helper method to define mock.On call
func (_e *Network_Expecter) GetPeerList() *Network_GetPeerList_Call {
	return &Network_GetPeerList_Call{Call: _e.mock.On("GetPeerList")}
}

func (_c *Network_GetPeerList_Call) Run(run func()) *Network_GetPeerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Network_GetPeerList_Call) Return(_a0 []string) *Network_GetPeerList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_GetPeerList_Call) RunAndReturn(run func() []string) *Network_GetPeerList_Call {
	_c.Call.Return(run)
	return _c
}

// SendAppendEntry provides a mock function with given fields: ctx, peerId, logEntry
func (_m *Network) SendAppendEntry(ctx context.Context, peerId string, logEntry *entries.LogEntry) network.ResponseStatus {
	ret := _m.Called(ctx, peerId, logEntry)

	if len(ret) == 0 {
		panic("no return value specified for SendAppendEntry")
	}

	var r0 network.ResponseStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, *entries.LogEntry) network.ResponseStatus); ok {
		r0 = rf(ctx, peerId, logEntry)
	} else {
		r0 = ret.Get(0).(network.ResponseStatus)
	}

	return r0
}

// Network_SendAppendEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAppendEntry'
type Network_SendAppendEntry_Call struct {
	*mock.Call
}

// SendAppendEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - peerId string
//   - logEntry *entries.LogEntry
func (_e *Network_Expecter) SendAppendEntry(ctx interface{}, peerId interface{}, logEntry interface{}) *Network_SendAppendEntry_Call {
	return &Network_SendAppendEntry_Call{Call: _e.mock.On("SendAppendEntry", ctx, peerId, logEntry)}
}

func (_c *Network_SendAppendEntry_Call) Run(run func(ctx context.Context, peerId string, logEntry *entries.LogEntry)) *Network_SendAppendEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entries.LogEntry))
	})
	return _c
}

func (_c *Network_SendAppendEntry_Call) Return(_a0 network.ResponseStatus) *Network_SendAppendEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_SendAppendEntry_Call) RunAndReturn(run func(context.Context, string, *entries.LogEntry) network.ResponseStatus) *Network_SendAppendEntry_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeartbeat provides a mock function with given fields: ctx, peerId
func (_m *Network) SendHeartbeat(ctx context.Context, peerId string) {
	_m.Called(ctx, peerId)
}

// Network_SendHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeartbeat'
type Network_SendHeartbeat_Call struct {
	*mock.Call
}

// SendHeartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - peerId string
func (_e *Network_Expecter) SendHeartbeat(ctx interface{}, peerId interface{}) *Network_SendHeartbeat_Call {
	return &Network_SendHeartbeat_Call{Call: _e.mock.On("SendHeartbeat", ctx, peerId)}
}

func (_c *Network_SendHeartbeat_Call) Run(run func(ctx context.Context, peerId string)) *Network_SendHeartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Network_SendHeartbeat_Call) Return() *Network_SendHeartbeat_Call {
	_c.Call.Return()
	return _c
}

func (_c *Network_SendHeartbeat_Call) RunAndReturn(run func(context.Context, string)) *Network_SendHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// SendRequestVote provides a mock function with given fields: ctx, term
func (_m *Network) SendRequestVote(ctx context.Context, term uint64) chan bool {
	ret := _m.Called(ctx, term)

	if len(ret) == 0 {
		panic("no return value specified for SendRequestVote")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func(context.Context, uint64) chan bool); ok {
		r0 = rf(ctx, term)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// Network_SendRequestVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequestVote'
type Network_SendRequestVote_Call struct {
	*mock.Call
}

// SendRequestVote is a helper method to define mock.On call
//   - ctx context.Context
//   - term uint64
func (_e *Network_Expecter) SendRequestVote(ctx interface{}, term interface{}) *Network_SendRequestVote_Call {
	return &Network_SendRequestVote_Call{Call: _e.mock.On("SendRequestVote", ctx, term)}
}

func (_c *Network_SendRequestVote_Call) Run(run func(ctx context.Context, term uint64)) *Network_SendRequestVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Network_SendRequestVote_Call) Return(_a0 chan bool) *Network_SendRequestVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Network_SendRequestVote_Call) RunAndReturn(run func(context.Context, uint64) chan bool) *Network_SendRequestVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetwork creates a new instance of Network. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetwork(t interface {
	mock.TestingT
	Cleanup(func())
}) *Network {
	mock := &Network{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
